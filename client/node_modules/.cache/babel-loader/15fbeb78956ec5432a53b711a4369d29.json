{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAPIRequest = void 0;\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst qs = require(\"qs\");\n\nconst stream = require(\"stream\");\n\nconst urlTemplate = require(\"url-template\");\n\nconst uuid = require(\"uuid\");\n\nconst extend = require(\"extend\");\n\nconst isbrowser_1 = require(\"./isbrowser\");\n\nconst h2 = require(\"./http2\");\n\nconst resolve = require(\"url\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst pkg = require('../../package.json'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction isReadableStream(obj) {\n  return obj !== null && typeof obj === 'object' && typeof obj.pipe === 'function' && obj.readable !== false && typeof obj._read === 'function' && typeof obj._readableState === 'object';\n}\n\nfunction getMissingParams(params, required) {\n  const missing = new Array();\n  required.forEach(param => {\n    // Is the required param in the params object?\n    if (params[param] === undefined) {\n      missing.push(param);\n    }\n  }); // If there are any required params missing, return their names in array,\n  // otherwise return null\n\n  return missing.length > 0 ? missing : null;\n}\n\nfunction createAPIRequest(parameters, callback) {\n  if (callback) {\n    createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n  } else {\n    return createAPIRequestAsync(parameters);\n  }\n}\n\nexports.createAPIRequest = createAPIRequest;\n\nasync function createAPIRequestAsync(parameters) {\n  var _a; // Combine the GaxiosOptions options passed with this specific\n  // API call with the global options configured at the API Context\n  // level, or at the global level.\n\n\n  const options = extend(true, {}, // Ensure we don't leak settings upstream\n  ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, // Google level options\n  parameters.context._options || {}, // Per-API options\n  parameters.options // API call params\n  );\n  const params = extend(true, {}, // New base object\n  options.params, // Combined global/per-api params\n  parameters.params // API call params\n  );\n  options.userAgentDirectives = options.userAgentDirectives || [];\n  const media = params.media || {};\n  /**\n   * In a previous version of this API, the request body was stuffed in a field\n   * named `resource`.  This caused lots of problems, because it's not uncommon\n   * to have an actual named parameter required which is also named `resource`.\n   * This meant that users would have to use `resource_` in those cases, which\n   * pretty much nobody figures out on their own. The request body is now\n   * documented as being in the `requestBody` property, but we also need to keep\n   * using `resource` for reasons of back-compat. Cases that need to be covered\n   * here:\n   * - user provides just a `resource` with a request body\n   * - user provides both a `resource` and a `resource_`\n   * - user provides just a `requestBody`\n   * - user provides both a `requestBody` and a `resource`\n   */\n\n  let resource = params.requestBody;\n\n  if (!params.requestBody && params.resource && (!parameters.requiredParams.includes('resource') || typeof params.resource !== 'string')) {\n    resource = params.resource;\n    delete params.resource;\n  }\n\n  delete params.requestBody;\n  let authClient = params.auth || options.auth;\n  const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n  delete params.media;\n  delete params.auth; // Grab headers from user provided options\n\n  const headers = params.headers || {};\n  populateAPIHeader(headers);\n  delete params.headers; // Un-alias parameters that were modified due to conflicts with reserved names\n\n  Object.keys(params).forEach(key => {\n    if (key.slice(-1) === '_') {\n      const newKey = key.slice(0, -1);\n      params[newKey] = params[key];\n      delete params[key];\n    }\n  }); // Check for missing required parameters in the API request\n\n  const missingParams = getMissingParams(params, parameters.requiredParams);\n\n  if (missingParams) {\n    // Some params are missing - stop further operations and inform the\n    // developer which required params are not included in the request\n    throw new Error('Missing required parameters: ' + missingParams.join(', '));\n  } // Parse urls\n\n\n  if (options.url) {\n    options.url = urlTemplate.parse(options.url).expand(params);\n  }\n\n  if (parameters.mediaUrl) {\n    parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n  } // Rewrite url if rootUrl is globally set\n\n\n  if (parameters.context._options.rootUrl !== undefined && options.url !== undefined) {\n    const path = options.url.slice(parameters.context._options.rootUrl.length);\n    options.url = resolve.resolve(parameters.context._options.rootUrl, path);\n  } // When forming the querystring, override the serializer so that array\n  // values are serialized like this:\n  // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n  // This serializer also encodes spaces in the querystring as `%20`,\n  // whereas the default serializer in gaxios encodes to a `+`.\n\n\n  options.paramsSerializer = params => {\n    return qs.stringify(params, {\n      arrayFormat: 'repeat'\n    });\n  }; // delete path params from the params object so they do not end up in query\n\n\n  parameters.pathParams.forEach(param => delete params[param]); // if authClient is actually a string, use it as an API KEY\n\n  if (typeof authClient === 'string') {\n    params.key = params.key || authClient;\n    authClient = undefined;\n  }\n\n  function multipartUpload(multipart) {\n    const boundary = uuid.v4();\n    const finale = `--${boundary}--`;\n    const rStream = new stream.PassThrough({\n      flush(callback) {\n        this.push('\\r\\n');\n        this.push(finale);\n        callback();\n      }\n\n    });\n    const pStream = new ProgressStream();\n    const isStream = isReadableStream(multipart[1].body);\n    headers['content-type'] = `multipart/related; boundary=${boundary}`;\n\n    for (const part of multipart) {\n      const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n      rStream.push(preamble);\n\n      if (typeof part.body === 'string') {\n        rStream.push(part.body);\n        rStream.push('\\r\\n');\n      } else {\n        // Gaxios does not natively support onUploadProgress in node.js.\n        // Pipe through the pStream first to read the number of bytes read\n        // for the purpose of tracking progress.\n        pStream.on('progress', bytesRead => {\n          if (options.onUploadProgress) {\n            options.onUploadProgress({\n              bytesRead\n            });\n          }\n        });\n        part.body.pipe(pStream).pipe(rStream);\n      }\n    }\n\n    if (!isStream) {\n      rStream.push(finale);\n      rStream.push(null);\n    }\n\n    options.data = rStream;\n  }\n\n  function browserMultipartUpload(multipart) {\n    const boundary = uuid.v4();\n    const finale = `--${boundary}--`;\n    headers['content-type'] = `multipart/related; boundary=${boundary}`;\n    let content = '';\n\n    for (const part of multipart) {\n      const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n      content += preamble;\n\n      if (typeof part.body === 'string') {\n        content += part.body;\n        content += '\\r\\n';\n      }\n    }\n\n    content += finale;\n    options.data = content;\n  }\n\n  if (parameters.mediaUrl && media.body) {\n    options.url = parameters.mediaUrl;\n\n    if (resource) {\n      params.uploadType = 'multipart';\n      const multipart = [{\n        'content-type': 'application/json',\n        body: JSON.stringify(resource)\n      }, {\n        'content-type': media.mimeType || resource && resource.mimeType || defaultMime,\n        body: media.body\n      }];\n\n      if (!isbrowser_1.isBrowser()) {\n        // gaxios doesn't support multipart/related uploads, so it has to\n        // be implemented here.\n        multipartUpload(multipart);\n      } else {\n        browserMultipartUpload(multipart);\n      }\n    } else {\n      params.uploadType = 'media';\n      Object.assign(headers, {\n        'content-type': media.mimeType || defaultMime\n      });\n      options.data = media.body;\n    }\n  } else {\n    options.data = resource || undefined;\n  }\n\n  options.headers = extend(true, options.headers || {}, headers);\n  options.params = params;\n\n  if (!isbrowser_1.isBrowser()) {\n    options.headers['Accept-Encoding'] = 'gzip';\n    options.userAgentDirectives.push({\n      product: 'google-api-nodejs-client',\n      version: pkg.version,\n      comment: 'gzip'\n    });\n    const userAgent = options.userAgentDirectives.map(d => {\n      let line = `${d.product}/${d.version}`;\n\n      if (d.comment) {\n        line += ` (${d.comment})`;\n      }\n\n      return line;\n    }).join(' ');\n    options.headers['User-Agent'] = userAgent;\n  } // By default gaxios treats any 2xx as valid, and all non 2xx status\n  // codes as errors.  This is a problem for HTTP 304s when used along\n  // with an eTag.\n\n\n  if (!options.validateStatus) {\n    options.validateStatus = status => {\n      return status >= 200 && status < 300 || status === 304;\n    };\n  } // Retry by default\n\n\n  options.retry = options.retry === undefined ? true : options.retry;\n  delete options.auth; // is overridden by our auth code\n  // Perform the HTTP request.  NOTE: this function used to return a\n  // mikeal/request object. Since the transition to Axios, the method is\n  // now void.  This may be a source of confusion for users upgrading from\n  // version 24.0 -> 25.0 or up.\n\n  if (authClient && typeof authClient === 'object') {\n    if (options.http2) {\n      const authHeaders = await authClient.getRequestHeaders(options.url);\n      const mooOpts = Object.assign({}, options);\n      mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n      return h2.request(mooOpts);\n    } else {\n      return authClient.request(options);\n    }\n  } else {\n    return new google_auth_library_1.DefaultTransporter().request(options);\n  }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\n\n\nclass ProgressStream extends stream.Transform {\n  constructor() {\n    super(...arguments);\n    this.bytesRead = 0;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _transform(chunk, encoding, callback) {\n    this.bytesRead += chunk.length;\n    this.emit('progress', this.bytesRead);\n    this.push(chunk);\n    callback();\n  }\n\n}\n\nfunction populateAPIHeader(headers) {\n  // TODO: we should eventually think about adding browser support for this\n  // populating the gl-web header (web support should also be added to\n  // google-auth-library-nodejs).\n  if (!isbrowser_1.isBrowser()) {\n    headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n  }\n}","map":{"version":3,"sources":["/Users/evankiser/Desktop/React/PubTasks/client/node_modules/googleapis-common/build/src/apirequest.js"],"names":["Object","defineProperty","exports","value","createAPIRequest","google_auth_library_1","require","qs","stream","urlTemplate","uuid","extend","isbrowser_1","h2","resolve","pkg","isReadableStream","obj","pipe","readable","_read","_readableState","getMissingParams","params","required","missing","Array","forEach","param","undefined","push","length","parameters","callback","createAPIRequestAsync","then","r","_a","options","context","google","_options","userAgentDirectives","media","resource","requestBody","requiredParams","includes","authClient","auth","defaultMime","body","headers","populateAPIHeader","keys","key","slice","newKey","missingParams","Error","join","url","parse","expand","mediaUrl","rootUrl","path","paramsSerializer","stringify","arrayFormat","pathParams","multipartUpload","multipart","boundary","v4","finale","rStream","PassThrough","flush","pStream","ProgressStream","isStream","part","preamble","on","bytesRead","onUploadProgress","data","browserMultipartUpload","content","uploadType","JSON","mimeType","isBrowser","assign","product","version","comment","userAgent","map","d","line","validateStatus","status","retry","http2","authHeaders","getRequestHeaders","mooOpts","request","DefaultTransporter","Transform","constructor","arguments","_transform","chunk","encoding","emit","process","versions","node"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAPIRequest = void 0;\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst extend = require(\"extend\");\nconst isbrowser_1 = require(\"./isbrowser\");\nconst h2 = require(\"./http2\");\nconst resolve = require(\"url\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../../package.json');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        typeof obj.pipe === 'function' &&\n        obj.readable !== false &&\n        typeof obj._read === 'function' &&\n        typeof obj._readableState === 'object');\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nasync function createAPIRequestAsync(parameters) {\n    var _a;\n    // Combine the GaxiosOptions options passed with this specific\n    // API call with the global options configured at the API Context\n    // level, or at the global level.\n    const options = extend(true, {}, // Ensure we don't leak settings upstream\n    ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, // Google level options\n    parameters.context._options || {}, // Per-API options\n    parameters.options // API call params\n    );\n    const params = extend(true, {}, // New base object\n    options.params, // Combined global/per-api params\n    parameters.params // API call params\n    );\n    options.userAgentDirectives = options.userAgentDirectives || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */\n    let resource = params.requestBody;\n    if (!params.requestBody &&\n        params.resource &&\n        (!parameters.requiredParams.includes('resource') ||\n            typeof params.resource !== 'string')) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth || options.auth;\n    const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = params.headers || {};\n    populateAPIHeader(headers);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach(key => {\n        if (key.slice(-1) === '_') {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error('Missing required parameters: ' + missingParams.join(', '));\n    }\n    // Parse urls\n    if (options.url) {\n        options.url = urlTemplate.parse(options.url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined &&\n        options.url !== undefined) {\n        const path = options.url.slice(parameters.context._options.rootUrl.length);\n        options.url = resolve.resolve(parameters.context._options.rootUrl, path);\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = params => {\n        return qs.stringify(params, { arrayFormat: 'repeat' });\n    };\n    // delete path params from the params object so they do not end up in query\n    parameters.pathParams.forEach(param => delete params[param]);\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === 'string') {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    function multipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n            flush(callback) {\n                this.push('\\r\\n');\n                this.push(finale);\n                callback();\n            },\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            rStream.push(preamble);\n            if (typeof part.body === 'string') {\n                rStream.push(part.body);\n                rStream.push('\\r\\n');\n            }\n            else {\n                // Gaxios does not natively support onUploadProgress in node.js.\n                // Pipe through the pStream first to read the number of bytes read\n                // for the purpose of tracking progress.\n                pStream.on('progress', bytesRead => {\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress({ bytesRead });\n                    }\n                });\n                part.body.pipe(pStream).pipe(rStream);\n            }\n        }\n        if (!isStream) {\n            rStream.push(finale);\n            rStream.push(null);\n        }\n        options.data = rStream;\n    }\n    function browserMultipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        let content = '';\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            content += preamble;\n            if (typeof part.body === 'string') {\n                content += part.body;\n                content += '\\r\\n';\n            }\n        }\n        content += finale;\n        options.data = content;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            params.uploadType = 'multipart';\n            const multipart = [\n                { 'content-type': 'application/json', body: JSON.stringify(resource) },\n                {\n                    'content-type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                    body: media.body,\n                },\n            ];\n            if (!isbrowser_1.isBrowser()) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                multipartUpload(multipart);\n            }\n            else {\n                browserMultipartUpload(multipart);\n            }\n        }\n        else {\n            params.uploadType = 'media';\n            Object.assign(headers, { 'content-type': media.mimeType || defaultMime });\n            options.data = media.body;\n        }\n    }\n    else {\n        options.data = resource || undefined;\n    }\n    options.headers = extend(true, options.headers || {}, headers);\n    options.params = params;\n    if (!isbrowser_1.isBrowser()) {\n        options.headers['Accept-Encoding'] = 'gzip';\n        options.userAgentDirectives.push({\n            product: 'google-api-nodejs-client',\n            version: pkg.version,\n            comment: 'gzip',\n        });\n        const userAgent = options.userAgentDirectives\n            .map(d => {\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        })\n            .join(' ');\n        options.headers['User-Agent'] = userAgent;\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = status => {\n            return (status >= 200 && status < 300) || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    delete options.auth; // is overridden by our auth code\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === 'object') {\n        if (options.http2) {\n            const authHeaders = await authClient.getRequestHeaders(options.url);\n            const mooOpts = Object.assign({}, options);\n            mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n            return h2.request(mooOpts);\n        }\n        else {\n            return authClient.request(options);\n        }\n    }\n    else {\n        return new google_auth_library_1.DefaultTransporter().request(options);\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\nfunction populateAPIHeader(headers) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!isbrowser_1.isBrowser()) {\n        headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n}\n//# sourceMappingURL=apirequest.js.map"]},"metadata":{},"sourceType":"script"}