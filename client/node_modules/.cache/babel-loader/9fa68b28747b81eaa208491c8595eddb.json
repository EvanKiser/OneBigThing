{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataflow_v1b3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar dataflow_v1b3;\n\n(function (dataflow_v1b3) {\n  /**\n   * Dataflow API\n   *\n   * Manages Google Cloud Dataflow projects on Google Cloud Platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const dataflow = google.dataflow('v1b3');\n   *\n   * @namespace dataflow\n   * @type {Function}\n   * @version v1b3\n   * @variation v1b3\n   * @param {object=} options Options for Dataflow\n   */\n  class Dataflow {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.projects = new Resource$Projects(this.context);\n    }\n\n  }\n\n  dataflow_v1b3.Dataflow = Dataflow;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.catalogTemplates = new Resource$Projects$Catalogtemplates(this.context);\n      this.jobs = new Resource$Projects$Jobs(this.context);\n      this.locations = new Resource$Projects$Locations(this.context);\n      this.snapshots = new Resource$Projects$Snapshots(this.context);\n      this.templates = new Resource$Projects$Templates(this.context);\n      this.templateVersions = new Resource$Projects$Templateversions(this.context);\n    }\n\n    deleteSnapshots(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Catalogtemplates {\n    constructor(context) {\n      this.context = context;\n      this.templateVersions = new Resource$Projects$Catalogtemplates$Templateversions(this.context);\n    }\n\n    commit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+name}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    label(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+name}:label').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    tag(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+name}:tag').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Catalogtemplates = Resource$Projects$Catalogtemplates;\n\n  class Resource$Projects$Catalogtemplates$Templateversions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Catalogtemplates$Templateversions = Resource$Projects$Catalogtemplates$Templateversions;\n\n  class Resource$Projects$Jobs {\n    constructor(context) {\n      this.context = context;\n      this.debug = new Resource$Projects$Jobs$Debug(this.context);\n      this.messages = new Resource$Projects$Jobs$Messages(this.context);\n      this.workItems = new Resource$Projects$Jobs$Workitems(this.context);\n    }\n\n    aggregated(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs:aggregated').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    snapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Jobs = Resource$Projects$Jobs;\n\n  class Resource$Projects$Jobs$Debug {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Jobs$Debug = Resource$Projects$Jobs$Debug;\n\n  class Resource$Projects$Jobs$Messages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Jobs$Messages = Resource$Projects$Jobs$Messages;\n\n  class Resource$Projects$Jobs$Workitems {\n    constructor(context) {\n      this.context = context;\n    }\n\n    lease(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Jobs$Workitems = Resource$Projects$Jobs$Workitems;\n\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.flexTemplates = new Resource$Projects$Locations$Flextemplates(this.context);\n      this.jobs = new Resource$Projects$Locations$Jobs(this.context);\n      this.snapshots = new Resource$Projects$Locations$Snapshots(this.context);\n      this.sql = new Resource$Projects$Locations$Sql(this.context);\n      this.templates = new Resource$Projects$Locations$Templates(this.context);\n    }\n\n    workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations = Resource$Projects$Locations;\n\n  class Resource$Projects$Locations$Flextemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    launch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Flextemplates = Resource$Projects$Locations$Flextemplates;\n\n  class Resource$Projects$Locations$Jobs {\n    constructor(context) {\n      this.context = context;\n      this.debug = new Resource$Projects$Locations$Jobs$Debug(this.context);\n      this.messages = new Resource$Projects$Locations$Jobs$Messages(this.context);\n      this.snapshots = new Resource$Projects$Locations$Jobs$Snapshots(this.context);\n      this.workItems = new Resource$Projects$Locations$Jobs$Workitems(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    snapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs = Resource$Projects$Locations$Jobs;\n\n  class Resource$Projects$Locations$Jobs$Debug {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Debug = Resource$Projects$Locations$Jobs$Debug;\n\n  class Resource$Projects$Locations$Jobs$Messages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Messages = Resource$Projects$Locations$Jobs$Messages;\n\n  class Resource$Projects$Locations$Jobs$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Snapshots = Resource$Projects$Locations$Jobs$Snapshots;\n\n  class Resource$Projects$Locations$Jobs$Workitems {\n    constructor(context) {\n      this.context = context;\n    }\n\n    lease(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'jobId'],\n        pathParams: ['jobId', 'location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Workitems = Resource$Projects$Locations$Jobs$Workitems;\n\n  class Resource$Projects$Locations$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'snapshotId'],\n        pathParams: ['location', 'projectId', 'snapshotId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location', 'snapshotId'],\n        pathParams: ['location', 'projectId', 'snapshotId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Snapshots = Resource$Projects$Locations$Snapshots;\n\n  class Resource$Projects$Locations$Sql {\n    constructor(context) {\n      this.context = context;\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/sql:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Sql = Resource$Projects$Locations$Sql;\n\n  class Resource$Projects$Locations$Templates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    launch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'location'],\n        pathParams: ['location', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Locations$Templates = Resource$Projects$Locations$Templates;\n\n  class Resource$Projects$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'snapshotId'],\n        pathParams: ['projectId', 'snapshotId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Snapshots = Resource$Projects$Snapshots;\n\n  class Resource$Projects$Templates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    launch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/projects/{projectId}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Templates = Resource$Projects$Templates;\n\n  class Resource$Projects$Templateversions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dataflow_v1b3.Resource$Projects$Templateversions = Resource$Projects$Templateversions;\n})(dataflow_v1b3 = exports.dataflow_v1b3 || (exports.dataflow_v1b3 = {}));","map":{"version":3,"sources":["/Users/evankiser/Desktop/React/PubTasks/client/node_modules/googleapis/build/src/apis/dataflow/v1b3.js"],"names":["Object","defineProperty","exports","value","dataflow_v1b3","googleapis_common_1","require","Dataflow","constructor","options","google","context","_options","projects","Resource$Projects","catalogTemplates","Resource$Projects$Catalogtemplates","jobs","Resource$Projects$Jobs","locations","Resource$Projects$Locations","snapshots","Resource$Projects$Snapshots","templates","Resource$Projects$Templates","templateVersions","Resource$Projects$Templateversions","deleteSnapshots","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","workerMessages","Resource$Projects$Catalogtemplates$Templateversions","commit","delete","get","label","tag","create","debug","Resource$Projects$Jobs$Debug","messages","Resource$Projects$Jobs$Messages","workItems","Resource$Projects$Jobs$Workitems","aggregated","getMetrics","list","snapshot","update","getConfig","sendCapture","lease","reportStatus","flexTemplates","Resource$Projects$Locations$Flextemplates","Resource$Projects$Locations$Jobs","Resource$Projects$Locations$Snapshots","sql","Resource$Projects$Locations$Sql","Resource$Projects$Locations$Templates","launch","Resource$Projects$Locations$Jobs$Debug","Resource$Projects$Locations$Jobs$Messages","Resource$Projects$Locations$Jobs$Snapshots","Resource$Projects$Locations$Jobs$Workitems","validate"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dataflow_v1b3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar dataflow_v1b3;\n(function (dataflow_v1b3) {\n    /**\n     * Dataflow API\n     *\n     * Manages Google Cloud Dataflow projects on Google Cloud Platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const dataflow = google.dataflow('v1b3');\n     *\n     * @namespace dataflow\n     * @type {Function}\n     * @version v1b3\n     * @variation v1b3\n     * @param {object=} options Options for Dataflow\n     */\n    class Dataflow {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    dataflow_v1b3.Dataflow = Dataflow;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.catalogTemplates = new Resource$Projects$Catalogtemplates(this.context);\n            this.jobs = new Resource$Projects$Jobs(this.context);\n            this.locations = new Resource$Projects$Locations(this.context);\n            this.snapshots = new Resource$Projects$Snapshots(this.context);\n            this.templates = new Resource$Projects$Templates(this.context);\n            this.templateVersions = new Resource$Projects$Templateversions(this.context);\n        }\n        deleteSnapshots(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Catalogtemplates {\n        constructor(context) {\n            this.context = context;\n            this.templateVersions = new Resource$Projects$Catalogtemplates$Templateversions(this.context);\n        }\n        commit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        label(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}:label').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        tag(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}:tag').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Catalogtemplates = Resource$Projects$Catalogtemplates;\n    class Resource$Projects$Catalogtemplates$Templateversions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Catalogtemplates$Templateversions = Resource$Projects$Catalogtemplates$Templateversions;\n    class Resource$Projects$Jobs {\n        constructor(context) {\n            this.context = context;\n            this.debug = new Resource$Projects$Jobs$Debug(this.context);\n            this.messages = new Resource$Projects$Jobs$Messages(this.context);\n            this.workItems = new Resource$Projects$Jobs$Workitems(this.context);\n        }\n        aggregated(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs:aggregated').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        snapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs = Resource$Projects$Jobs;\n    class Resource$Projects$Jobs$Debug {\n        constructor(context) {\n            this.context = context;\n        }\n        getConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs$Debug = Resource$Projects$Jobs$Debug;\n    class Resource$Projects$Jobs$Messages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs$Messages = Resource$Projects$Jobs$Messages;\n    class Resource$Projects$Jobs$Workitems {\n        constructor(context) {\n            this.context = context;\n        }\n        lease(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs$Workitems = Resource$Projects$Jobs$Workitems;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.flexTemplates = new Resource$Projects$Locations$Flextemplates(this.context);\n            this.jobs = new Resource$Projects$Locations$Jobs(this.context);\n            this.snapshots = new Resource$Projects$Locations$Snapshots(this.context);\n            this.sql = new Resource$Projects$Locations$Sql(this.context);\n            this.templates = new Resource$Projects$Locations$Templates(this.context);\n        }\n        workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Flextemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        launch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Flextemplates = Resource$Projects$Locations$Flextemplates;\n    class Resource$Projects$Locations$Jobs {\n        constructor(context) {\n            this.context = context;\n            this.debug = new Resource$Projects$Locations$Jobs$Debug(this.context);\n            this.messages = new Resource$Projects$Locations$Jobs$Messages(this.context);\n            this.snapshots = new Resource$Projects$Locations$Jobs$Snapshots(this.context);\n            this.workItems = new Resource$Projects$Locations$Jobs$Workitems(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        snapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs = Resource$Projects$Locations$Jobs;\n    class Resource$Projects$Locations$Jobs$Debug {\n        constructor(context) {\n            this.context = context;\n        }\n        getConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Debug = Resource$Projects$Locations$Jobs$Debug;\n    class Resource$Projects$Locations$Jobs$Messages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Messages = Resource$Projects$Locations$Jobs$Messages;\n    class Resource$Projects$Locations$Jobs$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Snapshots = Resource$Projects$Locations$Jobs$Snapshots;\n    class Resource$Projects$Locations$Jobs$Workitems {\n        constructor(context) {\n            this.context = context;\n        }\n        lease(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Workitems = Resource$Projects$Locations$Jobs$Workitems;\n    class Resource$Projects$Locations$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'snapshotId'],\n                pathParams: ['location', 'projectId', 'snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'snapshotId'],\n                pathParams: ['location', 'projectId', 'snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Snapshots = Resource$Projects$Locations$Snapshots;\n    class Resource$Projects$Locations$Sql {\n        constructor(context) {\n            this.context = context;\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/sql:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Sql = Resource$Projects$Locations$Sql;\n    class Resource$Projects$Locations$Templates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        launch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Templates = Resource$Projects$Locations$Templates;\n    class Resource$Projects$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'snapshotId'],\n                pathParams: ['projectId', 'snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Snapshots = Resource$Projects$Snapshots;\n    class Resource$Projects$Templates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        launch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Templates = Resource$Projects$Templates;\n    class Resource$Projects$Templateversions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Templateversions = Resource$Projects$Templateversions;\n})(dataflow_v1b3 = exports.dataflow_v1b3 || (exports.dataflow_v1b3 = {}));\n//# sourceMappingURL=v1b3.js.map"]},"metadata":{},"sourceType":"script"}