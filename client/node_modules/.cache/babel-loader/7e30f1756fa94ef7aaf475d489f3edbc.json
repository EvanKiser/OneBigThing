{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blogger_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar blogger_v3;\n\n(function (blogger_v3) {\n  /**\n   * Blogger API v3\n   *\n   * The Blogger API provides access to posts, comments and pages of a Blogger blog.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const blogger = google.blogger('v3');\n   *\n   * @namespace blogger\n   * @type {Function}\n   * @version v3\n   * @variation v3\n   * @param {object=} options Options for Blogger\n   */\n  class Blogger {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.blogs = new Resource$Blogs(this.context);\n      this.blogUserInfos = new Resource$Bloguserinfos(this.context);\n      this.comments = new Resource$Comments(this.context);\n      this.pages = new Resource$Pages(this.context);\n      this.pageViews = new Resource$Pageviews(this.context);\n      this.posts = new Resource$Posts(this.context);\n      this.postUserInfos = new Resource$Postuserinfos(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n\n  }\n\n  blogger_v3.Blogger = Blogger;\n\n  class Resource$Blogs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getByUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/byurl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['url'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listByUser(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/users/{userId}/blogs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Blogs = Resource$Blogs;\n\n  class Resource$Bloguserinfos {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'blogId'],\n        pathParams: ['blogId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Bloguserinfos = Resource$Bloguserinfos;\n\n  class Resource$Comments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    approve(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId', 'commentId'],\n        pathParams: ['blogId', 'commentId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId', 'commentId'],\n        pathParams: ['blogId', 'commentId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId', 'commentId'],\n        pathParams: ['blogId', 'commentId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listByBlog(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId', 'commentId'],\n        pathParams: ['blogId', 'commentId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId', 'commentId'],\n        pathParams: ['blogId', 'commentId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Comments = Resource$Comments;\n\n  class Resource$Pages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'pageId'],\n        pathParams: ['blogId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'pageId'],\n        pathParams: ['blogId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'pageId'],\n        pathParams: ['blogId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    publish(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'pageId'],\n        pathParams: ['blogId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    revert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}/revert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'pageId'],\n        pathParams: ['blogId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'pageId'],\n        pathParams: ['blogId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Pages = Resource$Pages;\n\n  class Resource$Pageviews {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/pageviews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Pageviews = Resource$Pageviews;\n\n  class Resource$Posts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getByPath(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/bypath').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'path'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    publish(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    revert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/revert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'q'],\n        pathParams: ['blogId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['blogId', 'postId'],\n        pathParams: ['blogId', 'postId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Posts = Resource$Posts;\n\n  class Resource$Postuserinfos {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'blogId', 'postId'],\n        pathParams: ['blogId', 'postId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'blogId'],\n        pathParams: ['blogId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Postuserinfos = Resource$Postuserinfos;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  blogger_v3.Resource$Users = Resource$Users;\n})(blogger_v3 = exports.blogger_v3 || (exports.blogger_v3 = {}));","map":{"version":3,"sources":["/Users/evankiser/Desktop/React/PubTasks/client/node_modules/googleapis/build/src/apis/blogger/v3.js"],"names":["Object","defineProperty","exports","value","blogger_v3","googleapis_common_1","require","Blogger","constructor","options","google","context","_options","blogs","Resource$Blogs","blogUserInfos","Resource$Bloguserinfos","comments","Resource$Comments","pages","Resource$Pages","pageViews","Resource$Pageviews","posts","Resource$Posts","postUserInfos","Resource$Postuserinfos","users","Resource$Users","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","getByUrl","listByUser","approve","delete","list","listByBlog","markAsSpam","removeContent","insert","patch","publish","revert","update","getByPath","search"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blogger_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar blogger_v3;\n(function (blogger_v3) {\n    /**\n     * Blogger API v3\n     *\n     * The Blogger API provides access to posts, comments and pages of a Blogger blog.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const blogger = google.blogger('v3');\n     *\n     * @namespace blogger\n     * @type {Function}\n     * @version v3\n     * @variation v3\n     * @param {object=} options Options for Blogger\n     */\n    class Blogger {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.blogs = new Resource$Blogs(this.context);\n            this.blogUserInfos = new Resource$Bloguserinfos(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.pages = new Resource$Pages(this.context);\n            this.pageViews = new Resource$Pageviews(this.context);\n            this.posts = new Resource$Posts(this.context);\n            this.postUserInfos = new Resource$Postuserinfos(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    blogger_v3.Blogger = Blogger;\n    class Resource$Blogs {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getByUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/byurl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['url'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listByUser(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/users/{userId}/blogs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Blogs = Resource$Blogs;\n    class Resource$Bloguserinfos {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'blogId'],\n                pathParams: ['blogId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Bloguserinfos = Resource$Bloguserinfos;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        approve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId', 'commentId'],\n                pathParams: ['blogId', 'commentId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId', 'commentId'],\n                pathParams: ['blogId', 'commentId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId', 'commentId'],\n                pathParams: ['blogId', 'commentId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listByBlog(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId', 'commentId'],\n                pathParams: ['blogId', 'commentId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId', 'commentId'],\n                pathParams: ['blogId', 'commentId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Comments = Resource$Comments;\n    class Resource$Pages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        publish(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}/revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Pages = Resource$Pages;\n    class Resource$Pageviews {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/pageviews').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Pageviews = Resource$Pageviews;\n    class Resource$Posts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getByPath(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/bypath').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'path'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        publish(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/publish').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}/revert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'q'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Posts = Resource$Posts;\n    class Resource$Postuserinfos {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'blogId', 'postId'],\n                pathParams: ['blogId', 'postId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/users/{userId}/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'blogId'],\n                pathParams: ['blogId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Postuserinfos = Resource$Postuserinfos;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v3.Resource$Users = Resource$Users;\n})(blogger_v3 = exports.blogger_v3 || (exports.blogger_v3 = {}));\n//# sourceMappingURL=v3.js.map"]},"metadata":{},"sourceType":"script"}