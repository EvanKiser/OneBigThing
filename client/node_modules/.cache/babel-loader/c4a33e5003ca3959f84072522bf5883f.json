{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abusiveexperiencereport_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar abusiveexperiencereport_v1;\n\n(function (abusiveexperiencereport_v1) {\n  /**\n   * Abusive Experience Report API\n   *\n   * Views Abusive Experience Report data, and gets a list of sites that have a significant number of abusive experiences.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const abusiveexperiencereport = google.abusiveexperiencereport('v1');\n   *\n   * @namespace abusiveexperiencereport\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Abusiveexperiencereport\n   */\n  class Abusiveexperiencereport {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.sites = new Resource$Sites(this.context);\n      this.violatingSites = new Resource$Violatingsites(this.context);\n    }\n\n  }\n\n  abusiveexperiencereport_v1.Abusiveexperiencereport = Abusiveexperiencereport;\n\n  class Resource$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://abusiveexperiencereport.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  abusiveexperiencereport_v1.Resource$Sites = Resource$Sites;\n\n  class Resource$Violatingsites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://abusiveexperiencereport.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/violatingSites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  abusiveexperiencereport_v1.Resource$Violatingsites = Resource$Violatingsites;\n})(abusiveexperiencereport_v1 = exports.abusiveexperiencereport_v1 || (exports.abusiveexperiencereport_v1 = {}));","map":{"version":3,"sources":["/Users/evankiser/Desktop/React/PubTasks/client/node_modules/googleapis/build/src/apis/abusiveexperiencereport/v1.js"],"names":["Object","defineProperty","exports","value","abusiveexperiencereport_v1","googleapis_common_1","require","Abusiveexperiencereport","constructor","options","google","context","_options","sites","Resource$Sites","violatingSites","Resource$Violatingsites","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.abusiveexperiencereport_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar abusiveexperiencereport_v1;\n(function (abusiveexperiencereport_v1) {\n    /**\n     * Abusive Experience Report API\n     *\n     * Views Abusive Experience Report data, and gets a list of sites that have a significant number of abusive experiences.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const abusiveexperiencereport = google.abusiveexperiencereport('v1');\n     *\n     * @namespace abusiveexperiencereport\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Abusiveexperiencereport\n     */\n    class Abusiveexperiencereport {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.sites = new Resource$Sites(this.context);\n            this.violatingSites = new Resource$Violatingsites(this.context);\n        }\n    }\n    abusiveexperiencereport_v1.Abusiveexperiencereport = Abusiveexperiencereport;\n    class Resource$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://abusiveexperiencereport.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    abusiveexperiencereport_v1.Resource$Sites = Resource$Sites;\n    class Resource$Violatingsites {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://abusiveexperiencereport.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/violatingSites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    abusiveexperiencereport_v1.Resource$Violatingsites = Resource$Violatingsites;\n})(abusiveexperiencereport_v1 = exports.abusiveexperiencereport_v1 || (exports.abusiveexperiencereport_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}