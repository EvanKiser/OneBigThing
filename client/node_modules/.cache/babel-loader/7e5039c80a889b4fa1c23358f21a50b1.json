{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.searchconsole_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar searchconsole_v1;\n\n(function (searchconsole_v1) {\n  /**\n   * Google Search Console API\n   *\n   * The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const searchconsole = google.searchconsole('v1');\n   *\n   * @namespace searchconsole\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Searchconsole\n   */\n  class Searchconsole {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.urlTestingTools = new Resource$Urltestingtools(this.context);\n    }\n\n  }\n\n  searchconsole_v1.Searchconsole = Searchconsole;\n\n  class Resource$Urltestingtools {\n    constructor(context) {\n      this.context = context;\n      this.mobileFriendlyTest = new Resource$Urltestingtools$Mobilefriendlytest(this.context);\n    }\n\n  }\n\n  searchconsole_v1.Resource$Urltestingtools = Resource$Urltestingtools;\n\n  class Resource$Urltestingtools$Mobilefriendlytest {\n    constructor(context) {\n      this.context = context;\n    }\n\n    run(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/urlTestingTools/mobileFriendlyTest:run').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  searchconsole_v1.Resource$Urltestingtools$Mobilefriendlytest = Resource$Urltestingtools$Mobilefriendlytest;\n})(searchconsole_v1 = exports.searchconsole_v1 || (exports.searchconsole_v1 = {}));","map":{"version":3,"sources":["/Users/evankiser/Desktop/React/PubTasks/client/node_modules/googleapis/build/src/apis/searchconsole/v1.js"],"names":["Object","defineProperty","exports","value","searchconsole_v1","googleapis_common_1","require","Searchconsole","constructor","options","google","context","_options","urlTestingTools","Resource$Urltestingtools","mobileFriendlyTest","Resource$Urltestingtools$Mobilefriendlytest","run","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,IAAIF,gBAAJ;;AACA,CAAC,UAAUA,gBAAV,EAA4B;AACzB;;;;;;;;;;;;;;;AAeA,QAAMG,aAAN,CAAoB;AAChBC,IAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACzB,WAAKC,OAAL,GAAe;AACXC,QAAAA,QAAQ,EAAEH,OAAO,IAAI,EADV;AAEXC,QAAAA;AAFW,OAAf;AAIA,WAAKG,eAAL,GAAuB,IAAIC,wBAAJ,CAA6B,KAAKH,OAAlC,CAAvB;AACH;;AAPe;;AASpBP,EAAAA,gBAAgB,CAACG,aAAjB,GAAiCA,aAAjC;;AACA,QAAMO,wBAAN,CAA+B;AAC3BN,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAKI,kBAAL,GAA0B,IAAIC,2CAAJ,CAAgD,KAAKL,OAArD,CAA1B;AACH;;AAJ0B;;AAM/BP,EAAAA,gBAAgB,CAACU,wBAAjB,GAA4CA,wBAA5C;;AACA,QAAME,2CAAN,CAAkD;AAC9CR,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDM,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;AAEA,UAAIT,OAAO,GAAIU,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAZ,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOU,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAV,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMa,OAAO,GAAGb,OAAO,CAACa,OAAR,IAAmB,uCAAnC;AACA,YAAMC,UAAU,GAAG;AACfd,QAAAA,OAAO,EAAET,MAAM,CAACwB,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,4CAAX,EAAyDI,OAAzD,CAAiE,cAAjE,EAAiF,IAAjF,CADc;AAEnBC,UAAAA,MAAM,EAAE;AAFW,SAAd,EAGNlB,OAHM,CADM;AAKfY,QAAAA,MALe;AAMfO,QAAAA,cAAc,EAAE,EAND;AAOfC,QAAAA,UAAU,EAAE,EAPG;AAQflB,QAAAA,OAAO,EAAE,KAAKA;AARC,OAAnB;;AAUA,UAAIS,QAAJ,EAAc;AACVf,QAAAA,mBAAmB,CAACyB,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOf,mBAAmB,CAACyB,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAlC6C;;AAoClDnB,EAAAA,gBAAgB,CAACY,2CAAjB,GAA+DA,2CAA/D;AACH,CAtED,EAsEGZ,gBAAgB,GAAGF,OAAO,CAACE,gBAAR,KAA6BF,OAAO,CAACE,gBAAR,GAA2B,EAAxD,CAtEtB","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.searchconsole_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar searchconsole_v1;\n(function (searchconsole_v1) {\n    /**\n     * Google Search Console API\n     *\n     * The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const searchconsole = google.searchconsole('v1');\n     *\n     * @namespace searchconsole\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Searchconsole\n     */\n    class Searchconsole {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.urlTestingTools = new Resource$Urltestingtools(this.context);\n        }\n    }\n    searchconsole_v1.Searchconsole = Searchconsole;\n    class Resource$Urltestingtools {\n        constructor(context) {\n            this.context = context;\n            this.mobileFriendlyTest = new Resource$Urltestingtools$Mobilefriendlytest(this.context);\n        }\n    }\n    searchconsole_v1.Resource$Urltestingtools = Resource$Urltestingtools;\n    class Resource$Urltestingtools$Mobilefriendlytest {\n        constructor(context) {\n            this.context = context;\n        }\n        run(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://searchconsole.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/urlTestingTools/mobileFriendlyTest:run').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    searchconsole_v1.Resource$Urltestingtools$Mobilefriendlytest = Resource$Urltestingtools$Mobilefriendlytest;\n})(searchconsole_v1 = exports.searchconsole_v1 || (exports.searchconsole_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}